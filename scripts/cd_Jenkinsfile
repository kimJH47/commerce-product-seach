pipeline {
    agent any
    tools {
        gradle 'gradle'
    }

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('DOCKER_HUB_ID')
        docker_image_name = 'tray1147/ecommerce:latest'
    }

    stages {
        stage('Pull GitHub') {
            steps {
                checkout scmGit(
                        branches: [[name: 'master']],
                        extensions: [submodule(parentCredentials: true, trackingSubmodules: true)],
                        userRemoteConfigs: [[credentialsId: 'git-account', url: 'https://github.com/kimJH47/commerce-product-seach']]
                )
            }
        }

        stage('Build') {
            steps {
                sh "./gradlew clean bootJar"
            }
        }

        stage('Build Docker Image') {
            steps {
                docker.build(env.docker_image_name, '-f docker/Dockerfile .')
            }
        }

        stage('Push Docker Image to Dockerhub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'DOCKER_HUB_ID') {
                        docker.image(env.docker_image_name).push()
                    }
                }
            }
            post {
                success {
                    echo '성공적으로 도커 이미지가 도커허브로 푸시되었습니다.'

                }
                failure {
                    echo '이미지 푸시 실패'
                }
            }
        }

        //daily_summary 서버 사용
        stage('SSH and Run docker compose') {
            steps {
                sshagent(credentials: ['daily_summary_ssh']){
                    sh '''
                       ssh -o StrictHostKeyChecking=no ubuntu@$SERVER_IP
                       ssh ubuntu@$SERVER_IP "sudo docker compose up -d"
                      '''
                }
            }
        }
    }

    post {
        always {
            sh "docker rmi $docker_image_name"
        }
        success {
            echo '배포 파이프라인 성공'
        }
        failure {
            echo '배포 파이프라인 실패'
        }
    }
}
